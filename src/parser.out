Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATOM_EX
    NODE_EX

Grammar

Rule 0     S' -> theory
Rule 1     theory -> statement theory
Rule 2     theory -> statement
Rule 3     statement -> VARS VARIABLE COLON atomlist DOT
Rule 4     statement -> NODE COLON eqseq DOT
Rule 5     atomlist -> ATOM atomlist
Rule 6     atomlist -> ATOM
Rule 7     eqseq -> equation eqseq
Rule 8     eqseq -> equation
Rule 9     equation -> lhs rhs
Rule 10    lhs -> L_ANGLE_LEFT atomseq R_ANGLE_LEFT
Rule 11    rhs -> EQ atomval
Rule 12    rhs -> DEFEQ descval
Rule 13    atomval -> atomseq
Rule 14    atomval -> L_PAREN atomseq R_PAREN
Rule 15    atomseq -> ATOM atomseq
Rule 16    atomseq -> <empty>
Rule 17    descval -> descseq
Rule 18    descval -> L_PAREN descseq R_PAREN
Rule 19    descseq -> desc descseq
Rule 20    descseq -> <empty>
Rule 21    desc -> ATOM
Rule 22    desc -> DQUOTE pointer DQUOTE
Rule 23    desc -> pointer
Rule 24    desc -> VARIABLE
Rule 25    pointer -> NODE COLON descpath
Rule 26    pointer -> NODE
Rule 27    pointer -> descpath
Rule 28    descpath -> L_ANGLE descseq R_ANGLE

Terminals, with rules where they appear

ATOM                 : 5 6 15 21
ATOM_EX              : 
COLON                : 3 4 25
DEFEQ                : 12
DOT                  : 3 4
DQUOTE               : 22 22
EQ                   : 11
L_ANGLE              : 28
L_ANGLE_LEFT         : 10
L_PAREN              : 14 18
NODE                 : 4 25 26
NODE_EX              : 
R_ANGLE              : 28
R_ANGLE_LEFT         : 10
R_PAREN              : 14 18
VARIABLE             : 3 24
VARS                 : 3
error                : 

Nonterminals, with rules where they appear

atomlist             : 3 5
atomseq              : 10 13 14 15
atomval              : 11
desc                 : 19
descpath             : 25 27
descseq              : 17 18 19 28
descval              : 12
eqseq                : 4 7
equation             : 7 8
lhs                  : 9
pointer              : 22 23
rhs                  : 9
statement            : 1 2
theory               : 1 0

Parsing method: LALR

state 0

    (0) S' -> . theory
    (1) theory -> . statement theory
    (2) theory -> . statement
    (3) statement -> . VARS VARIABLE COLON atomlist DOT
    (4) statement -> . NODE COLON eqseq DOT

    VARS            shift and go to state 3
    NODE            shift and go to state 4

    theory                         shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> theory .



state 2

    (1) theory -> statement . theory
    (2) theory -> statement .
    (1) theory -> . statement theory
    (2) theory -> . statement
    (3) statement -> . VARS VARIABLE COLON atomlist DOT
    (4) statement -> . NODE COLON eqseq DOT

    $end            reduce using rule 2 (theory -> statement .)
    VARS            shift and go to state 3
    NODE            shift and go to state 4

    statement                      shift and go to state 2
    theory                         shift and go to state 5

state 3

    (3) statement -> VARS . VARIABLE COLON atomlist DOT

    VARIABLE        shift and go to state 6


state 4

    (4) statement -> NODE . COLON eqseq DOT

    COLON           shift and go to state 7


state 5

    (1) theory -> statement theory .

    $end            reduce using rule 1 (theory -> statement theory .)


state 6

    (3) statement -> VARS VARIABLE . COLON atomlist DOT

    COLON           shift and go to state 8


state 7

    (4) statement -> NODE COLON . eqseq DOT
    (7) eqseq -> . equation eqseq
    (8) eqseq -> . equation
    (9) equation -> . lhs rhs
    (10) lhs -> . L_ANGLE_LEFT atomseq R_ANGLE_LEFT

    L_ANGLE_LEFT    shift and go to state 12

    eqseq                          shift and go to state 9
    equation                       shift and go to state 10
    lhs                            shift and go to state 11

state 8

    (3) statement -> VARS VARIABLE COLON . atomlist DOT
    (5) atomlist -> . ATOM atomlist
    (6) atomlist -> . ATOM

    ATOM            shift and go to state 14

    atomlist                       shift and go to state 13

state 9

    (4) statement -> NODE COLON eqseq . DOT

    DOT             shift and go to state 15


state 10

    (7) eqseq -> equation . eqseq
    (8) eqseq -> equation .
    (7) eqseq -> . equation eqseq
    (8) eqseq -> . equation
    (9) equation -> . lhs rhs
    (10) lhs -> . L_ANGLE_LEFT atomseq R_ANGLE_LEFT

    DOT             reduce using rule 8 (eqseq -> equation .)
    L_ANGLE_LEFT    shift and go to state 12

    equation                       shift and go to state 10
    eqseq                          shift and go to state 16
    lhs                            shift and go to state 11

state 11

    (9) equation -> lhs . rhs
    (11) rhs -> . EQ atomval
    (12) rhs -> . DEFEQ descval

    EQ              shift and go to state 18
    DEFEQ           shift and go to state 19

    rhs                            shift and go to state 17

state 12

    (10) lhs -> L_ANGLE_LEFT . atomseq R_ANGLE_LEFT
    (15) atomseq -> . ATOM atomseq
    (16) atomseq -> .

    ATOM            shift and go to state 21
    R_ANGLE_LEFT    reduce using rule 16 (atomseq -> .)

    atomseq                        shift and go to state 20

state 13

    (3) statement -> VARS VARIABLE COLON atomlist . DOT

    DOT             shift and go to state 22


state 14

    (5) atomlist -> ATOM . atomlist
    (6) atomlist -> ATOM .
    (5) atomlist -> . ATOM atomlist
    (6) atomlist -> . ATOM

    DOT             reduce using rule 6 (atomlist -> ATOM .)
    ATOM            shift and go to state 14

    atomlist                       shift and go to state 23

state 15

    (4) statement -> NODE COLON eqseq DOT .

    VARS            reduce using rule 4 (statement -> NODE COLON eqseq DOT .)
    NODE            reduce using rule 4 (statement -> NODE COLON eqseq DOT .)
    $end            reduce using rule 4 (statement -> NODE COLON eqseq DOT .)


state 16

    (7) eqseq -> equation eqseq .

    DOT             reduce using rule 7 (eqseq -> equation eqseq .)


state 17

    (9) equation -> lhs rhs .

    L_ANGLE_LEFT    reduce using rule 9 (equation -> lhs rhs .)
    DOT             reduce using rule 9 (equation -> lhs rhs .)


state 18

    (11) rhs -> EQ . atomval
    (13) atomval -> . atomseq
    (14) atomval -> . L_PAREN atomseq R_PAREN
    (15) atomseq -> . ATOM atomseq
    (16) atomseq -> .

    L_PAREN         shift and go to state 26
    ATOM            shift and go to state 21
    L_ANGLE_LEFT    reduce using rule 16 (atomseq -> .)
    DOT             reduce using rule 16 (atomseq -> .)

    atomval                        shift and go to state 24
    atomseq                        shift and go to state 25

state 19

    (12) rhs -> DEFEQ . descval
    (17) descval -> . descseq
    (18) descval -> . L_PAREN descseq R_PAREN
    (19) descseq -> . desc descseq
    (20) descseq -> .
    (21) desc -> . ATOM
    (22) desc -> . DQUOTE pointer DQUOTE
    (23) desc -> . pointer
    (24) desc -> . VARIABLE
    (25) pointer -> . NODE COLON descpath
    (26) pointer -> . NODE
    (27) pointer -> . descpath
    (28) descpath -> . L_ANGLE descseq R_ANGLE

    L_PAREN         shift and go to state 29
    L_ANGLE_LEFT    reduce using rule 20 (descseq -> .)
    DOT             reduce using rule 20 (descseq -> .)
    ATOM            shift and go to state 31
    DQUOTE          shift and go to state 32
    VARIABLE        shift and go to state 34
    NODE            shift and go to state 35
    L_ANGLE         shift and go to state 37

    descval                        shift and go to state 27
    descseq                        shift and go to state 28
    desc                           shift and go to state 30
    pointer                        shift and go to state 33
    descpath                       shift and go to state 36

state 20

    (10) lhs -> L_ANGLE_LEFT atomseq . R_ANGLE_LEFT

    R_ANGLE_LEFT    shift and go to state 38


state 21

    (15) atomseq -> ATOM . atomseq
    (15) atomseq -> . ATOM atomseq
    (16) atomseq -> .

    ATOM            shift and go to state 21
    R_ANGLE_LEFT    reduce using rule 16 (atomseq -> .)
    L_ANGLE_LEFT    reduce using rule 16 (atomseq -> .)
    DOT             reduce using rule 16 (atomseq -> .)
    R_PAREN         reduce using rule 16 (atomseq -> .)

    atomseq                        shift and go to state 39

state 22

    (3) statement -> VARS VARIABLE COLON atomlist DOT .

    VARS            reduce using rule 3 (statement -> VARS VARIABLE COLON atomlist DOT .)
    NODE            reduce using rule 3 (statement -> VARS VARIABLE COLON atomlist DOT .)
    $end            reduce using rule 3 (statement -> VARS VARIABLE COLON atomlist DOT .)


state 23

    (5) atomlist -> ATOM atomlist .

    DOT             reduce using rule 5 (atomlist -> ATOM atomlist .)


state 24

    (11) rhs -> EQ atomval .

    L_ANGLE_LEFT    reduce using rule 11 (rhs -> EQ atomval .)
    DOT             reduce using rule 11 (rhs -> EQ atomval .)


state 25

    (13) atomval -> atomseq .

    L_ANGLE_LEFT    reduce using rule 13 (atomval -> atomseq .)
    DOT             reduce using rule 13 (atomval -> atomseq .)


state 26

    (14) atomval -> L_PAREN . atomseq R_PAREN
    (15) atomseq -> . ATOM atomseq
    (16) atomseq -> .

    ATOM            shift and go to state 21
    R_PAREN         reduce using rule 16 (atomseq -> .)

    atomseq                        shift and go to state 40

state 27

    (12) rhs -> DEFEQ descval .

    L_ANGLE_LEFT    reduce using rule 12 (rhs -> DEFEQ descval .)
    DOT             reduce using rule 12 (rhs -> DEFEQ descval .)


state 28

    (17) descval -> descseq .

    L_ANGLE_LEFT    reduce using rule 17 (descval -> descseq .)
    DOT             reduce using rule 17 (descval -> descseq .)


state 29

    (18) descval -> L_PAREN . descseq R_PAREN
    (19) descseq -> . desc descseq
    (20) descseq -> .
    (21) desc -> . ATOM
    (22) desc -> . DQUOTE pointer DQUOTE
    (23) desc -> . pointer
    (24) desc -> . VARIABLE
    (25) pointer -> . NODE COLON descpath
    (26) pointer -> . NODE
    (27) pointer -> . descpath
    (28) descpath -> . L_ANGLE descseq R_ANGLE

    R_PAREN         reduce using rule 20 (descseq -> .)
    ATOM            shift and go to state 31
    DQUOTE          shift and go to state 32
    VARIABLE        shift and go to state 34
    NODE            shift and go to state 35
    L_ANGLE         shift and go to state 37

    descseq                        shift and go to state 41
    desc                           shift and go to state 30
    pointer                        shift and go to state 33
    descpath                       shift and go to state 36

state 30

    (19) descseq -> desc . descseq
    (19) descseq -> . desc descseq
    (20) descseq -> .
    (21) desc -> . ATOM
    (22) desc -> . DQUOTE pointer DQUOTE
    (23) desc -> . pointer
    (24) desc -> . VARIABLE
    (25) pointer -> . NODE COLON descpath
    (26) pointer -> . NODE
    (27) pointer -> . descpath
    (28) descpath -> . L_ANGLE descseq R_ANGLE

    L_ANGLE_LEFT    reduce using rule 20 (descseq -> .)
    DOT             reduce using rule 20 (descseq -> .)
    R_PAREN         reduce using rule 20 (descseq -> .)
    R_ANGLE         reduce using rule 20 (descseq -> .)
    ATOM            shift and go to state 31
    DQUOTE          shift and go to state 32
    VARIABLE        shift and go to state 34
    NODE            shift and go to state 35
    L_ANGLE         shift and go to state 37

    desc                           shift and go to state 30
    descseq                        shift and go to state 42
    pointer                        shift and go to state 33
    descpath                       shift and go to state 36

state 31

    (21) desc -> ATOM .

    ATOM            reduce using rule 21 (desc -> ATOM .)
    DQUOTE          reduce using rule 21 (desc -> ATOM .)
    VARIABLE        reduce using rule 21 (desc -> ATOM .)
    NODE            reduce using rule 21 (desc -> ATOM .)
    L_ANGLE         reduce using rule 21 (desc -> ATOM .)
    L_ANGLE_LEFT    reduce using rule 21 (desc -> ATOM .)
    DOT             reduce using rule 21 (desc -> ATOM .)
    R_PAREN         reduce using rule 21 (desc -> ATOM .)
    R_ANGLE         reduce using rule 21 (desc -> ATOM .)


state 32

    (22) desc -> DQUOTE . pointer DQUOTE
    (25) pointer -> . NODE COLON descpath
    (26) pointer -> . NODE
    (27) pointer -> . descpath
    (28) descpath -> . L_ANGLE descseq R_ANGLE

    NODE            shift and go to state 35
    L_ANGLE         shift and go to state 37

    pointer                        shift and go to state 43
    descpath                       shift and go to state 36

state 33

    (23) desc -> pointer .

    ATOM            reduce using rule 23 (desc -> pointer .)
    DQUOTE          reduce using rule 23 (desc -> pointer .)
    VARIABLE        reduce using rule 23 (desc -> pointer .)
    NODE            reduce using rule 23 (desc -> pointer .)
    L_ANGLE         reduce using rule 23 (desc -> pointer .)
    L_ANGLE_LEFT    reduce using rule 23 (desc -> pointer .)
    DOT             reduce using rule 23 (desc -> pointer .)
    R_PAREN         reduce using rule 23 (desc -> pointer .)
    R_ANGLE         reduce using rule 23 (desc -> pointer .)


state 34

    (24) desc -> VARIABLE .

    ATOM            reduce using rule 24 (desc -> VARIABLE .)
    DQUOTE          reduce using rule 24 (desc -> VARIABLE .)
    VARIABLE        reduce using rule 24 (desc -> VARIABLE .)
    NODE            reduce using rule 24 (desc -> VARIABLE .)
    L_ANGLE         reduce using rule 24 (desc -> VARIABLE .)
    L_ANGLE_LEFT    reduce using rule 24 (desc -> VARIABLE .)
    DOT             reduce using rule 24 (desc -> VARIABLE .)
    R_PAREN         reduce using rule 24 (desc -> VARIABLE .)
    R_ANGLE         reduce using rule 24 (desc -> VARIABLE .)


state 35

    (25) pointer -> NODE . COLON descpath
    (26) pointer -> NODE .

    COLON           shift and go to state 44
    ATOM            reduce using rule 26 (pointer -> NODE .)
    DQUOTE          reduce using rule 26 (pointer -> NODE .)
    VARIABLE        reduce using rule 26 (pointer -> NODE .)
    NODE            reduce using rule 26 (pointer -> NODE .)
    L_ANGLE         reduce using rule 26 (pointer -> NODE .)
    L_ANGLE_LEFT    reduce using rule 26 (pointer -> NODE .)
    DOT             reduce using rule 26 (pointer -> NODE .)
    R_PAREN         reduce using rule 26 (pointer -> NODE .)
    R_ANGLE         reduce using rule 26 (pointer -> NODE .)


state 36

    (27) pointer -> descpath .

    ATOM            reduce using rule 27 (pointer -> descpath .)
    DQUOTE          reduce using rule 27 (pointer -> descpath .)
    VARIABLE        reduce using rule 27 (pointer -> descpath .)
    NODE            reduce using rule 27 (pointer -> descpath .)
    L_ANGLE         reduce using rule 27 (pointer -> descpath .)
    L_ANGLE_LEFT    reduce using rule 27 (pointer -> descpath .)
    DOT             reduce using rule 27 (pointer -> descpath .)
    R_PAREN         reduce using rule 27 (pointer -> descpath .)
    R_ANGLE         reduce using rule 27 (pointer -> descpath .)


state 37

    (28) descpath -> L_ANGLE . descseq R_ANGLE
    (19) descseq -> . desc descseq
    (20) descseq -> .
    (21) desc -> . ATOM
    (22) desc -> . DQUOTE pointer DQUOTE
    (23) desc -> . pointer
    (24) desc -> . VARIABLE
    (25) pointer -> . NODE COLON descpath
    (26) pointer -> . NODE
    (27) pointer -> . descpath
    (28) descpath -> . L_ANGLE descseq R_ANGLE

    R_ANGLE         reduce using rule 20 (descseq -> .)
    ATOM            shift and go to state 31
    DQUOTE          shift and go to state 32
    VARIABLE        shift and go to state 34
    NODE            shift and go to state 35
    L_ANGLE         shift and go to state 37

    descseq                        shift and go to state 45
    desc                           shift and go to state 30
    pointer                        shift and go to state 33
    descpath                       shift and go to state 36

state 38

    (10) lhs -> L_ANGLE_LEFT atomseq R_ANGLE_LEFT .

    EQ              reduce using rule 10 (lhs -> L_ANGLE_LEFT atomseq R_ANGLE_LEFT .)
    DEFEQ           reduce using rule 10 (lhs -> L_ANGLE_LEFT atomseq R_ANGLE_LEFT .)


state 39

    (15) atomseq -> ATOM atomseq .

    R_ANGLE_LEFT    reduce using rule 15 (atomseq -> ATOM atomseq .)
    L_ANGLE_LEFT    reduce using rule 15 (atomseq -> ATOM atomseq .)
    DOT             reduce using rule 15 (atomseq -> ATOM atomseq .)
    R_PAREN         reduce using rule 15 (atomseq -> ATOM atomseq .)


state 40

    (14) atomval -> L_PAREN atomseq . R_PAREN

    R_PAREN         shift and go to state 46


state 41

    (18) descval -> L_PAREN descseq . R_PAREN

    R_PAREN         shift and go to state 47


state 42

    (19) descseq -> desc descseq .

    L_ANGLE_LEFT    reduce using rule 19 (descseq -> desc descseq .)
    DOT             reduce using rule 19 (descseq -> desc descseq .)
    R_PAREN         reduce using rule 19 (descseq -> desc descseq .)
    R_ANGLE         reduce using rule 19 (descseq -> desc descseq .)


state 43

    (22) desc -> DQUOTE pointer . DQUOTE

    DQUOTE          shift and go to state 48


state 44

    (25) pointer -> NODE COLON . descpath
    (28) descpath -> . L_ANGLE descseq R_ANGLE

    L_ANGLE         shift and go to state 37

    descpath                       shift and go to state 49

state 45

    (28) descpath -> L_ANGLE descseq . R_ANGLE

    R_ANGLE         shift and go to state 50


state 46

    (14) atomval -> L_PAREN atomseq R_PAREN .

    L_ANGLE_LEFT    reduce using rule 14 (atomval -> L_PAREN atomseq R_PAREN .)
    DOT             reduce using rule 14 (atomval -> L_PAREN atomseq R_PAREN .)


state 47

    (18) descval -> L_PAREN descseq R_PAREN .

    L_ANGLE_LEFT    reduce using rule 18 (descval -> L_PAREN descseq R_PAREN .)
    DOT             reduce using rule 18 (descval -> L_PAREN descseq R_PAREN .)


state 48

    (22) desc -> DQUOTE pointer DQUOTE .

    ATOM            reduce using rule 22 (desc -> DQUOTE pointer DQUOTE .)
    DQUOTE          reduce using rule 22 (desc -> DQUOTE pointer DQUOTE .)
    VARIABLE        reduce using rule 22 (desc -> DQUOTE pointer DQUOTE .)
    NODE            reduce using rule 22 (desc -> DQUOTE pointer DQUOTE .)
    L_ANGLE         reduce using rule 22 (desc -> DQUOTE pointer DQUOTE .)
    L_ANGLE_LEFT    reduce using rule 22 (desc -> DQUOTE pointer DQUOTE .)
    DOT             reduce using rule 22 (desc -> DQUOTE pointer DQUOTE .)
    R_PAREN         reduce using rule 22 (desc -> DQUOTE pointer DQUOTE .)
    R_ANGLE         reduce using rule 22 (desc -> DQUOTE pointer DQUOTE .)


state 49

    (25) pointer -> NODE COLON descpath .

    ATOM            reduce using rule 25 (pointer -> NODE COLON descpath .)
    DQUOTE          reduce using rule 25 (pointer -> NODE COLON descpath .)
    VARIABLE        reduce using rule 25 (pointer -> NODE COLON descpath .)
    NODE            reduce using rule 25 (pointer -> NODE COLON descpath .)
    L_ANGLE         reduce using rule 25 (pointer -> NODE COLON descpath .)
    L_ANGLE_LEFT    reduce using rule 25 (pointer -> NODE COLON descpath .)
    DOT             reduce using rule 25 (pointer -> NODE COLON descpath .)
    R_PAREN         reduce using rule 25 (pointer -> NODE COLON descpath .)
    R_ANGLE         reduce using rule 25 (pointer -> NODE COLON descpath .)


state 50

    (28) descpath -> L_ANGLE descseq R_ANGLE .

    ATOM            reduce using rule 28 (descpath -> L_ANGLE descseq R_ANGLE .)
    DQUOTE          reduce using rule 28 (descpath -> L_ANGLE descseq R_ANGLE .)
    VARIABLE        reduce using rule 28 (descpath -> L_ANGLE descseq R_ANGLE .)
    NODE            reduce using rule 28 (descpath -> L_ANGLE descseq R_ANGLE .)
    L_ANGLE         reduce using rule 28 (descpath -> L_ANGLE descseq R_ANGLE .)
    L_ANGLE_LEFT    reduce using rule 28 (descpath -> L_ANGLE descseq R_ANGLE .)
    DOT             reduce using rule 28 (descpath -> L_ANGLE descseq R_ANGLE .)
    R_PAREN         reduce using rule 28 (descpath -> L_ANGLE descseq R_ANGLE .)
    R_ANGLE         reduce using rule 28 (descpath -> L_ANGLE descseq R_ANGLE .)

